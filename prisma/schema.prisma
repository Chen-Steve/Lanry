// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Novel {
  id             String    @id @default(uuid())
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime  @updatedAt @map("updated_at")
  title          String
  author         String
  description    String
  coverImageUrl  String?   @map("cover_image_url")
  slug           String    @unique
  status         NovelStatus
  ageRating      AgeRating @default(EVERYONE) @map("age_rating")
  bookmarkCount  Int       @default(0) @map("bookmark_count")
  views          Int       @default(0)
  rating         Float     @default(0) @map("rating")
  ratingCount    Int       @default(0) @map("rating_count")
  isAuthorNameCustom Boolean @default(true) @map("is_author_name_custom")
  autoReleaseEnabled Boolean @default(false) @map("auto_release_enabled")
  autoReleaseInterval Int @default(7) @map("auto_release_interval")
  fixedPriceEnabled Boolean @default(false) @map("fixed_price_enabled")
  fixedPriceAmount Int @default(10) @map("fixed_price_amount")
  chapters       Chapter[]
  volumes        Volume[]
  bookmarks      Bookmark[]
  readingHistory ReadingHistory[]
  chapterUnlocks ChapterUnlock[]
  comments       ChapterComment[]
  novelComments  NovelComment[]
  authorProfile  Profile?    @relation("NovelAuthor", fields: [authorProfileId], references: [id])
  authorProfileId  String?     @map("author_profile_id")
  translator     Profile?    @relation("NovelTranslator", fields: [translatorId], references: [id])
  translatorId   String?     @map("translator_id")
  ratings       NovelRating[]
  categories    CategoriesOnNovels[]
  tags          TagsOnNovels[]
  chapterLikes  ChapterLike[]
  characters     NovelCharacter[]
  viewLogs      NovelViewLog[]
  notifications Notification[]

  @@index([title])
  @@index([author])
  @@index([bookmarkCount])
  @@index([views])
  @@index([rating])
  @@index([authorProfileId])
  @@index([translatorId])
  @@map("novels")
}

model Volume {
  id            String    @id @default(uuid())
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")
  volumeNumber  Int       @map("volume_number")
  title         String
  description   String?
  novel         Novel     @relation(fields: [novelId], references: [id], onDelete: Cascade)
  novelId       String    @map("novel_id")
  chapters      Chapter[]

  @@unique([novelId, volumeNumber])
  @@index([novelId])
  @@map("volumes")
}

model Chapter {
  id            String    @id @default(uuid())
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")
  chapterNumber Int       @map("chapter_number")
  partNumber    Int?      @map("part_number")
  title         String
  slug          String    
  content       String    @db.Text
  publishAt     DateTime? @map("publish_at")
  coins         Int       @default(1)
  authorThoughts String?  @map("author_thoughts") @db.Text
  ageRating     AgeRating @default(EVERYONE) @map("age_rating")
  novel         Novel     @relation(fields: [novelId], references: [id], onDelete: Cascade)
  novelId       String    @map("novel_id")
  volume        Volume?   @relation(fields: [volumeId], references: [id])
  volumeId      String?   @map("volume_id")
  likes         ChapterLike[]
  likeCount     Int       @default(0) @map("like_count")
  comments      ChapterThreadComment[]

  @@unique([novelId, slug])
  @@index([novelId])
  @@index([chapterNumber])
  @@index([partNumber])
  @@index([volumeId])
  @@index([slug])
  @@index([publishAt])
  @@map("chapters")
}

model Profile {
  id                 String    @id
  createdAt          DateTime  @default(now()) @map("created_at")
  updatedAt          DateTime  @updatedAt @map("updated_at")
  username           String?   @unique
  currentStreak      Int       @default(0) @map("current_streak")
  lastVisit          DateTime? @map("last_visit")
  role               UserRole  @default(USER)
  kofiUrl            String?   @map("kofi_url")
  patreonUrl         String?   @map("patreon_url")
  customUrl          String?   @map("custom_url")
  customUrlLabel     String?   @map("custom_url_label")
  authorBio          String?   @map("author_bio") @db.Text
  avatarUrl          String?   @map("avatar_url")
  bookmarks          Bookmark[]
  readingHistory     ReadingHistory[]
  readingTime        ReadingTime?
  chapterComments    ChapterComment[]
  chapterThreadComments ChapterThreadComment[]
  novelComments      NovelComment[]
  coins              Int       @default(0)
  transactions       CoinTransaction[]
  chapterUnlocks     ChapterUnlock[]
  authoredNovels     Novel[]   @relation("NovelAuthor")
  translatedNovels   Novel[]   @relation("NovelTranslator")
  novelRatings       NovelRating[]
  chapterLikes       ChapterLike[]
  commentLikes       CommentLike[]
  chapterThreadCommentLikes ChapterThreadCommentLike[]
  receivedNotifications Notification[] @relation("ReceivedNotifications")
  sentNotifications     Notification[] @relation("SentNotifications")
  bookmarkFolders      BookmarkFolder[]

  @@map("profiles")
}

model BookmarkFolder {
  id          String    @id @default(uuid())
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  name        String
  description String?
  icon        String?
  color       String?
  profile     Profile   @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId   String    @map("profile_id")
  bookmarks   Bookmark[]
  parentFolder BookmarkFolder?  @relation("FolderHierarchy", fields: [parentFolderId], references: [id])
  parentFolderId String?        @map("parent_folder_id")
  subFolders   BookmarkFolder[] @relation("FolderHierarchy")

  @@unique([profileId, name, parentFolderId])
  @@index([profileId])
  @@map("bookmark_folders")
}

model Bookmark {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  profile   Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId String   @map("profile_id")
  novel     Novel    @relation(fields: [novelId], references: [id], onDelete: Cascade)
  novelId   String   @map("novel_id")
  folder    BookmarkFolder? @relation(fields: [folderId], references: [id])
  folderId  String?   @map("folder_id")

  @@unique([profileId, novelId])
  @@index([folderId])
  @@map("bookmarks")
}

model ReadingHistory {
  id           String   @id @default(uuid())
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  profile      Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId    String   @map("profile_id")
  novel        Novel    @relation(fields: [novelId], references: [id], onDelete: Cascade)
  novelId      String   @map("novel_id")
  lastChapter  Int      @map("last_chapter")
  lastPartNumber Int?   @map("last_part_number")
  lastRead     DateTime @default(now()) @map("last_read")

  @@unique([profileId, novelId])
  @@index([profileId, lastRead])
  @@index([novelId])
  @@index([lastRead])
  @@map("reading_history")
}

model ChapterComment {
  id            String   @id @default(uuid())
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")
  chapterNumber Int      @map("chapter_number")
  paragraphId   String   @map("paragraph_id")
  content       String   @db.Text
  profile       Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId     String   @map("profile_id")
  novel_id      String
  novel         Novel     @relation(fields: [novel_id], references: [id], onDelete: Cascade)

  @@index([chapterNumber])
  @@index([paragraphId])
  @@index([profileId])
  @@index([novel_id])
  @@map("chapter_comments")
}

model ChapterThreadComment {
  id            String   @id @default(uuid())
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")
  chapterId     String   @map("chapter_id")
  content       String   @db.Text
  profile       Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId     String   @map("profile_id")
  chapter       Chapter  @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  likes         ChapterThreadCommentLike[]

  @@index([chapterId])
  @@index([profileId])
  @@index([createdAt])
  @@map("chapter_thread_comments")
}

model CoinTransaction {
  id          String    @id @default(uuid())
  createdAt   DateTime  @default(now()) @map("created_at")
  profileId   String    @map("profile_id")
  amount      Int
  type        String    // "PURCHASE", "REWARD", etc.
  orderId     String?   @map("order_id") // PayPal order ID
  profile     Profile   @relation(fields: [profileId], references: [id])

  @@map("coin_transactions")
}

model ChapterUnlock {
  id            String   @id @default(uuid())
  profile_id    String
  novel_id      String
  chapter_number Int
  part_number   Int?
  cost         Int
  created_at   DateTime @default(now())
  profile      Profile  @relation(fields: [profile_id], references: [id])
  novel        Novel    @relation(fields: [novel_id], references: [id])

  @@unique([profile_id, novel_id, chapter_number])
  @@index([profile_id, novel_id, chapter_number, part_number])
  @@map("chapter_unlocks")
}

model NovelComment {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  content   String   @db.Text
  profile   Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId String   @map("profile_id")
  novel     Novel    @relation(fields: [novelId], references: [id], onDelete: Cascade)
  novelId   String   @map("novel_id")
  likes     CommentLike[]
  likeCount Int      @default(0) @map("like_count")
  notifications Notification[]
  
  // Add parent-child relationship for replies
  parent    NovelComment?  @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade)
  parentId  String?       @map("parent_comment_id")
  replies   NovelComment[] @relation("CommentReplies")

  @@index([profileId])
  @@index([novelId])
  @@index([parentId])
  @@map("novel_comments")
}

model ReadingTime {
  id              String   @id @default(uuid())
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")
  totalMinutes    Int      @default(0) @map("total_minutes")
  profile         Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId       String   @unique @map("profile_id")

  @@map("reading_time")
}

model NovelRating {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  rating    Int      @db.SmallInt
  profile   Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId String   @map("profile_id")
  novel     Novel    @relation(fields: [novelId], references: [id], onDelete: Cascade)
  novelId   String   @map("novel_id")

  @@unique([profileId, novelId])
  @@index([novelId])
  @@index([profileId])
  @@map("novel_ratings")
}

model NovelCategory {
  id          String               @id @default(uuid())
  name        String               @unique
  novels      CategoriesOnNovels[]
  createdAt   DateTime             @default(now()) @map("created_at")
  updatedAt   DateTime             @updatedAt @map("updated_at")

  @@map("novel_categories")
}

model CategoriesOnNovels {
  novel       Novel         @relation(fields: [novelId], references: [id])
  novelId     String        @map("novel_id")
  category    NovelCategory @relation(fields: [categoryId], references: [id])
  categoryId  String        @map("category_id")
  assignedAt  DateTime      @default(now())

  @@id([novelId, categoryId])
  @@map("categories_on_novels")
}

model Tag {
  id          String    @id @default(cuid())
  name        String    @unique
  description String?
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  novels      TagsOnNovels[]

  @@map("tags")
}

model TagsOnNovels {
  novel     Novel     @relation(fields: [novelId], references: [id], onDelete: Cascade)
  novelId   String    @map("novel_id")
  tag       Tag       @relation(fields: [tagId], references: [id], onDelete: Cascade)
  tagId     String    @map("tag_id")
  createdAt DateTime  @default(now()) @map("created_at")

  @@id([novelId, tagId])
  @@index([novelId])
  @@index([tagId])
  @@map("tags_on_novels")
}

enum NovelStatus {
  ONGOING
  COMPLETED
  HIATUS
}

enum UserRole {
  USER
  AUTHOR
  TRANSLATOR
  ADMIN
  SUPER_ADMIN
}

model ChapterLike {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  chapter     Chapter  @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  chapterId   String   @map("chapter_id")
  profile     Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId   String   @map("profile_id")
  novel       Novel    @relation(fields: [novelId], references: [id], onDelete: Cascade)
  novelId     String   @map("novel_id")

  @@unique([profileId, chapterId])
  @@index([chapterId])
  @@index([profileId])
  @@index([novelId])
  @@map("chapter_likes")
}

enum AgeRating {
  EVERYONE
  TEEN
  MATURE
  ADULT
}

model NovelCharacter {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  name        String
  role        String   // e.g. "Male Lead", "Female Lead", "Supporting"
  imageUrl    String   @map("image_url")
  description String?  @db.Text
  novel       Novel    @relation(fields: [novelId], references: [id], onDelete: Cascade)
  novelId     String   @map("novel_id")
  orderIndex  Int      @default(0) @map("order_index") // For controlling display order

  @@index([novelId])
  @@map("novel_characters")
}

model CommentLike {
  id          String       @id @default(uuid())
  createdAt   DateTime     @default(now()) @map("created_at")
  updatedAt   DateTime     @updatedAt @map("updated_at")
  comment     NovelComment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId   String       @map("comment_id")
  profile     Profile      @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId   String       @map("profile_id")

  @@unique([profileId, commentId])
  @@index([commentId])
  @@index([profileId])
  @@map("comment_likes")
}

model NovelViewLog {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now()) @map("created_at")
  viewedAt    DateTime @default(now()) @map("viewed_at")
  novel       Novel    @relation(fields: [novelId], references: [id], onDelete: Cascade)
  novelId     String   @map("novel_id")

  @@index([novelId])
  @@index([viewedAt])
  @@map("novel_view_logs")
}

model ChapterThreadCommentLike {
  id          String              @id @default(uuid())
  createdAt   DateTime            @default(now()) @map("created_at")
  updatedAt   DateTime            @updatedAt @map("updated_at")
  comment     ChapterThreadComment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId   String              @map("comment_id")
  profile     Profile             @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId   String              @map("profile_id")

  @@unique([profileId, commentId])
  @@index([commentId])
  @@index([profileId])
  @@map("chapter_thread_comment_likes")
}

model Notification {
  id            String   @id @default(uuid())
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")
  type          String   // 'comment_reply', 'like', 'follow', 'system'
  content       String   @db.Text
  link          String
  read          Boolean  @default(false)
  
  // Relations
  recipient     Profile  @relation("ReceivedNotifications", fields: [recipientId], references: [id], onDelete: Cascade)
  recipientId   String   @map("recipient_id")
  sender        Profile  @relation("SentNotifications", fields: [senderId], references: [id], onDelete: Cascade)
  senderId      String   @map("sender_id")
  
  // Optional relations
  novel         Novel?   @relation(fields: [novelId], references: [id], onDelete: Cascade)
  novelId       String?  @map("novel_id")
  comment       NovelComment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId     String?  @map("comment_id")

  @@index([recipientId])
  @@index([senderId])
  @@index([novelId])
  @@index([commentId])
  @@index([createdAt])
  @@map("notifications")
}