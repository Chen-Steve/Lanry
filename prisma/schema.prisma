// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Novel {
  id             String    @id @default(uuid())
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime  @updatedAt @map("updated_at")
  title          String
  author         String
  description    String
  coverImageUrl  String?   @map("cover_image_url")
  slug           String    @unique
  status         NovelStatus
  ageRating      AgeRating @default(EVERYONE) @map("age_rating")
  bookmarkCount  Int       @default(0) @map("bookmark_count")
  views          Int       @default(0)
  rating         Float     @default(0) @map("rating")
  ratingCount    Int       @default(0) @map("rating_count")
  isAuthorNameCustom Boolean @default(true) @map("is_author_name_custom")
  chapters       Chapter[]
  volumes        Volume[]
  arcs           Arc[]
  bookmarks      Bookmark[]
  readingHistory ReadingHistory[]
  chapterUnlocks ChapterUnlock[]
  comments       ChapterComment[]
  novelComments  NovelComment[]
  authorProfile  Profile?    @relation("NovelAuthor", fields: [authorProfileId], references: [id])
  authorProfileId  String?     @map("author_profile_id")
  translator     Profile?    @relation("NovelTranslator", fields: [translatorId], references: [id])
  translatorId   String?     @map("translator_id")
  ratings       NovelRating[]
  categories    CategoriesOnNovels[]
  chapterLikes  ChapterLike[]

  @@index([title])
  @@index([author])
  @@index([bookmarkCount])
  @@index([views])
  @@index([rating])
  @@index([authorProfileId])
  @@index([translatorId])
  @@map("novels")
}

model Volume {
  id            String    @id @default(uuid())
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")
  volumeNumber  Int       @map("volume_number")
  title         String
  description   String?
  novel         Novel     @relation(fields: [novelId], references: [id], onDelete: Cascade)
  novelId       String    @map("novel_id")
  chapters      Chapter[]
  arcs          Arc[]

  @@unique([novelId, volumeNumber])
  @@index([novelId])
  @@map("volumes")
}

model Arc {
  id            String    @id @default(uuid())
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")
  arcNumber     Int       @map("arc_number")
  title         String
  description   String?
  novel         Novel     @relation(fields: [novelId], references: [id], onDelete: Cascade)
  novelId       String    @map("novel_id")
  volume        Volume?   @relation(fields: [volumeId], references: [id])
  volumeId      String?   @map("volume_id")
  chapters      Chapter[]

  @@unique([novelId, arcNumber])
  @@index([novelId])
  @@index([volumeId])
  @@map("arcs")
}

model Chapter {
  id            String    @id @default(uuid())
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")
  chapterNumber Int       @map("chapter_number")
  partNumber    Int?      @map("part_number")
  title         String
  slug          String    
  content       String    @db.Text
  publishAt     DateTime? @map("publish_at")
  coins         Int       @default(1)
  authorThoughts String?  @map("author_thoughts") @db.Text
  novel         Novel     @relation(fields: [novelId], references: [id], onDelete: Cascade)
  novelId       String    @map("novel_id")
  volume        Volume?   @relation(fields: [volumeId], references: [id])
  volumeId      String?   @map("volume_id")
  arc           Arc?      @relation(fields: [arcId], references: [id])
  arcId         String?   @map("arc_id")
  likes         ChapterLike[]
  likeCount     Int       @default(0) @map("like_count")

  @@unique([novelId, slug])
  @@index([novelId])
  @@index([chapterNumber])
  @@index([partNumber])
  @@index([volumeId])
  @@index([arcId])
  @@index([slug])
  @@index([publishAt])
  @@map("chapters")
}

model Profile {
  id                 String    @id
  createdAt          DateTime  @default(now()) @map("created_at")
  updatedAt          DateTime  @updatedAt @map("updated_at")
  username           String?   @unique
  currentStreak      Int       @default(0) @map("current_streak")
  lastVisit          DateTime? @map("last_visit")
  role               UserRole  @default(USER)
  kofiUrl            String?   @map("kofi_url")
  patreonUrl         String?   @map("patreon_url")
  customUrl          String?   @map("custom_url")
  customUrlLabel     String?   @map("custom_url_label")
  avatarUrl          String?   @map("avatar_url")
  bookmarks          Bookmark[]
  readingHistory     ReadingHistory[]
  readingTime        ReadingTime?
  chapterComments    ChapterComment[]
  novelComments      NovelComment[]
  coins              Int       @default(0)
  transactions       CoinTransaction[]
  chapterUnlocks     ChapterUnlock[]
  authoredNovels     Novel[]   @relation("NovelAuthor")
  translatedNovels   Novel[]   @relation("NovelTranslator")
  forumThreads       ForumThread[]
  forumPosts         ForumPost[]
  forumVotes         ForumVote[]
  novelRequests      NovelRequest[]
  novelRequestVotes  NovelRequestVote[]
  novelRatings       NovelRating[]
  chapterLikes       ChapterLike[]

  @@map("profiles")
}

model Bookmark {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  profile   Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId String   @map("profile_id")
  novel     Novel    @relation(fields: [novelId], references: [id], onDelete: Cascade)
  novelId   String   @map("novel_id")

  @@unique([profileId, novelId])
  @@map("bookmarks")
}

model ReadingHistory {
  id           String   @id @default(uuid())
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  profile      Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId    String   @map("profile_id")
  novel        Novel    @relation(fields: [novelId], references: [id], onDelete: Cascade)
  novelId      String   @map("novel_id")
  lastChapter  Int      @map("last_chapter")
  lastRead     DateTime @default(now()) @map("last_read")

  @@unique([profileId, novelId])
  @@index([profileId, lastRead])
  @@index([novelId])
  @@index([lastRead])
  @@map("reading_history")
}

model ChapterComment {
  id            String   @id @default(uuid())
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")
  chapterNumber Int      @map("chapter_number")
  paragraphId   String   @map("paragraph_id")
  content       String   @db.Text
  profile       Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId     String   @map("profile_id")
  novel_id      String
  novel         Novel     @relation(fields: [novel_id], references: [id], onDelete: Cascade)

  @@index([chapterNumber])
  @@index([paragraphId])
  @@index([profileId])
  @@index([novel_id])
  @@map("chapter_comments")
}

model CoinTransaction {
  id          String    @id @default(uuid())
  createdAt   DateTime  @default(now()) @map("created_at")
  profileId   String    @map("profile_id")
  amount      Int
  type        String    // "PURCHASE", "REWARD", etc.
  orderId     String?   @map("order_id") // PayPal order ID
  profile     Profile   @relation(fields: [profileId], references: [id])

  @@map("coin_transactions")
}

model ChapterUnlock {
  id            String   @id @default(uuid())
  profile_id    String
  novel_id      String
  chapter_number Int
  cost         Int
  created_at   DateTime @default(now())
  profile      Profile  @relation(fields: [profile_id], references: [id])
  novel        Novel    @relation(fields: [novel_id], references: [id])

  @@unique([profile_id, novel_id, chapter_number])
  @@map("chapter_unlocks")
}

model ForumCategory {
  id            String    @id @default(cuid())
  name          String
  description   String
  thread_count  Int       @default(0)
  latest_thread DateTime?
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt
  threads       ForumThread[]

  @@map("forum_categories")
}

model ForumThread {
  id          String        @id @default(uuid())
  title       String
  content     String        @db.Text
  isPinned    Boolean       @default(false) @map("is_pinned")
  isLocked    Boolean       @default(false) @map("is_locked")
  createdAt   DateTime      @default(now()) @map("created_at")
  updatedAt   DateTime      @updatedAt @map("updated_at")
  category    ForumCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId  String        @map("category_id")
  author      Profile       @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId    String        @map("author_id")
  posts       ForumPost[]
  score       Int          @default(0)
  votes       ForumVote[]

  @@index([categoryId])
  @@index([authorId])
  @@index([createdAt])
  @@index([isPinned])
  @@map("forum_threads")
}

model ForumPost {
  id          String      @id @default(uuid())
  content     String      @db.Text
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @updatedAt @map("updated_at")
  thread      ForumThread @relation(fields: [threadId], references: [id], onDelete: Cascade)
  threadId    String      @map("thread_id")
  author      Profile     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId    String      @map("author_id")
  score       Int          @default(0)
  votes       ForumVote[]

  @@index([threadId])
  @@index([authorId])
  @@index([createdAt])
  @@map("forum_posts")
}

model ForumVote {
  id        String      @id @default(cuid())
  authorId  String      @map("author_id")
  postId    String?     @map("post_id")
  threadId  String?     @map("thread_id")
  createdAt DateTime    @default(now()) @map("created_at")
  updatedAt DateTime    @updatedAt @map("updated_at")
  author    Profile     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  post      ForumPost?  @relation(fields: [postId], references: [id], onDelete: Cascade)
  thread    ForumThread? @relation(fields: [threadId], references: [id], onDelete: Cascade)

  @@unique([authorId, threadId])
  @@unique([authorId, postId])
  @@index([postId])
  @@index([threadId])
  @@index([authorId])
  @@map("forum_votes")
}

model NovelRequest {
  id               String             @id @default(uuid())
  title            String
  author           String
  description      String
  originalLanguage String             @map("original_language")
  coverImage       String?            @map("cover_image")
  createdAt        DateTime           @default(now()) @map("created_at")
  updatedAt        DateTime           @updatedAt @map("updated_at")
  profile          Profile?           @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId        String?            @map("profile_id")
  votes            NovelRequestVote[]

  @@index([profileId])
  @@map("novel_requests")
}

model NovelRequestVote {
  id          String       @id @default(uuid())
  createdAt   DateTime     @default(now()) @map("created_at")
  request     NovelRequest @relation(fields: [requestId], references: [id], onDelete: Cascade)
  requestId   String       @map("request_id")
  profile     Profile      @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId   String       @map("profile_id")

  @@unique([profileId, requestId])
  @@index([requestId])
  @@index([profileId])
  @@map("novel_request_votes")
}

model NovelComment {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  content   String   @db.Text
  profile   Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId String   @map("profile_id")
  novel     Novel    @relation(fields: [novelId], references: [id], onDelete: Cascade)
  novelId   String   @map("novel_id")

  @@index([profileId])
  @@index([novelId])
  @@index([createdAt])
  @@map("novel_comments")
}

model ReadingTime {
  id              String   @id @default(uuid())
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")
  totalMinutes    Int      @default(0) @map("total_minutes")
  profile         Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId       String   @unique @map("profile_id")

  @@map("reading_time")
}

model NovelRating {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  rating    Int      @db.SmallInt
  profile   Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId String   @map("profile_id")
  novel     Novel    @relation(fields: [novelId], references: [id], onDelete: Cascade)
  novelId   String   @map("novel_id")

  @@unique([profileId, novelId])
  @@index([novelId])
  @@index([profileId])
  @@map("novel_ratings")
}

model NovelCategory {
  id          String               @id @default(uuid())
  name        String               @unique
  novels      CategoriesOnNovels[]
  createdAt   DateTime             @default(now()) @map("created_at")
  updatedAt   DateTime             @updatedAt @map("updated_at")

  @@map("novel_categories")
}

model CategoriesOnNovels {
  novel       Novel         @relation(fields: [novelId], references: [id])
  novelId     String        @map("novel_id")
  category    NovelCategory @relation(fields: [categoryId], references: [id])
  categoryId  String        @map("category_id")
  assignedAt  DateTime      @default(now())

  @@id([novelId, categoryId])
  @@map("categories_on_novels")
}

enum NovelStatus {
  ONGOING
  COMPLETED
  HIATUS
}

enum UserRole {
  USER
  AUTHOR
  TRANSLATOR
  ADMIN
  SUPER_ADMIN
}

model ChapterLike {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  chapter     Chapter  @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  chapterId   String   @map("chapter_id")
  profile     Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId   String   @map("profile_id")
  novel       Novel    @relation(fields: [novelId], references: [id], onDelete: Cascade)
  novelId     String   @map("novel_id")

  @@unique([profileId, chapterId])
  @@index([chapterId])
  @@index([profileId])
  @@index([novelId])
  @@map("chapter_likes")
}

enum AgeRating {
  EVERYONE
  TEEN
  MATURE
  ADULT
}
