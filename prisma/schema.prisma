// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Novel {
  id             String    @id @default(uuid())
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime  @updatedAt @map("updated_at")
  title          String
  author         String
  description    String
  coverImageUrl  String?   @map("cover_image_url")
  slug           String    @unique
  status         NovelStatus
  bookmarkCount  Int       @default(0) @map("bookmark_count")
  views          Int       @default(0)
  chapters       Chapter[]
  bookmarks      Bookmark[]
  readingHistory ReadingHistory[]

  @@index([title])
  @@index([author])
  @@index([bookmarkCount])
  @@index([views])
  @@map("novels")
}

model Chapter {
  id            String    @id @default(uuid())
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")
  chapterNumber Int       @map("chapter_number")
  title         String
  slug          String    @unique
  content       String    @db.Text
  publishAt     DateTime? @map("publish_at")
  novel         Novel     @relation(fields: [novelId], references: [id], onDelete: Cascade)
  novelId       String    @map("novel_id")

  @@unique([novelId, chapterNumber])
  @@index([novelId])
  @@index([chapterNumber])
  @@index([slug])
  @@index([publishAt])
  @@map("chapters")
}

model Profile {
  id                 String    @id
  createdAt          DateTime  @default(now()) @map("created_at")
  updatedAt          DateTime  @updatedAt @map("updated_at")
  username           String?   @unique
  currentStreak      Int       @default(0) @map("current_streak")
  lastVisit          DateTime? @map("last_visit")
  bookmarks          Bookmark[]
  readingHistory     ReadingHistory[]

  @@map("profiles")
}

model Bookmark {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  profile   Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId String   @map("profile_id")
  novel     Novel    @relation(fields: [novelId], references: [id], onDelete: Cascade)
  novelId   String   @map("novel_id")

  @@unique([profileId, novelId])
  @@map("bookmarks")
}

model ReadingHistory {
  id           String   @id @default(uuid())
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  profile      Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId    String   @map("profile_id")
  novel        Novel    @relation(fields: [novelId], references: [id], onDelete: Cascade)
  novelId      String   @map("novel_id")
  lastChapter  Int      @map("last_chapter")
  lastRead     DateTime @default(now()) @map("last_read")

  @@unique([profileId, novelId])
  @@map("reading_history")
}

enum NovelStatus {
  ONGOING
  COMPLETED
  HIATUS
}
